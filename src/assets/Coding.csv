topic,words,answer
Alg - Duplicate in array,duplicate duplicated array,<pre>console.log(findFirstDuplicate([10;2;3;3;10])); // 3<br><br>function findFirstDuplicate(array) {<br>  const usedItems = new Set();<br><br>  return array.find(item => {<br>    if (usedItems.has(item)) {<br>      return item;<br>    }<br>    usedItems.add(item);<br>  });<br>}</pre>
Alg - Number of occurencies,number occurencies,<pre>function countOccurencies(array) {<br>  const map = new Map();<br><br>  for (let item of array) {<br>    const count = map.get(item) ?? 0;<br>    map.set(item; count + 1);<br>  }<br><br>  return map;<br>}<br>-------------------------<br>function countOccurencies(array) {<br>  return array.reduce((map; item) => {<br>    const count = map.get(item) ?? 0;<br>    map.set(item; count + 1);<br>    return map;<br>  }; new Map());<br>}</pre>
Alg - Intersection of arrays,array arrays intersection,<pre>function intersection(arr1; arr2) {<br>  return arr1.reduce((acc; item) => {<br>    if (arr2.includes(item)) {<br>      delete arr2[arr2.indexOf(item)];<br>      acc.push(item);<br>    }<br>    return acc;<br>  }; []);<br>}</pre>
Alg - Merge sorted arrays,merge sorted arrays,<pre>function merge(array1; array2) {<br>  const array1Copy = array1.slice();<br>  const array2Copy = array2.slice();<br>  const result = [];<br>  let shifted1; shifted2;<br><br>  for(let i = 1; i <= array1.length + array2.length; i++) {<br>    if (shifted1 === undefined) shifted1 = array1Copy.shift();<br>    if (shifted2 === undefined) shifted2 = array2Copy.shift();<br>    if (shifted1 === undefined && shifted2 === undefined) break;<br><br>    if (shifted2 === undefined || shifted1 < shifted2) {<br>        result.push(shifted1);<br>        shifted1 = undefined;<br>    } else {<br>        result.push(shifted2);<br>        shifted2 = undefined;<br>    }<br>  }<br><br>  return result;<br>}</pre>
Alg - Pairs in array,pairs pair array,<pre>console.log(countPairs([1;2;-3;-1;1;3;-3;-1;1;1;1;-1])); // 4<br><br>function countPairs(array) {<br>  let count = 0;<br>  const map = new Map();<br><br>  for (let item of array) {<br>    const sameItemsCount = map.get(item) ?? 0;<br>    const waitingForPairsCount = map.get(-item) ?? 0;<br><br>    if (waitingForPairsCount > 0) {<br>      count++;<br>      map.set(-item; waitingForPairsCount - 1);<br>    } else {<br>      map.set(item; sameItemsCount + 1);<br>    }<br>  }<br><br>  return count;<br>}</pre>
Alg - Reverse one-directional linked list,reverse reversed one uni directional linked list,<pre>class Node {<br>  constructor(value) {<br>    this.value = value;<br>    this.next = null;<br>  }<br>}<br><br>const node1 = new Node(1);<br>const node2 = new Node(2);<br>const node3 = new Node(3);<br>node1.next = node2;<br>node2.next = node3;<br><br>function reverseLinkedList(node) {<br>  if (!node?.next) return null;<br>  const reversedNode = reverseLinkedList(node.next);<br>  node.next.next = node;<br>  node.next = null;<br>  return reversedNode;<br>}</pre>
Alg - Binary search tree - find element,binary search tree,<pre>class Node {<br>  constructor(value) {<br>    this.value = value;<br>    this.left = null;<br>    this.right = null;<br>  }<br>}<br><br>const node1 = new Node(1);<br>const node2 = new Node(2);<br>const node3 = new Node(3);<br>const node4 = new Node(4);<br>node1.right = node2;<br>node2.left = node1;<br>node2.right = node3;<br>node3.left = node2;<br>node3.right = node4;<br>node4.left = node3;<br><br>function search(node; value) {<br>  if (node === null || node.value === value) return node;<br>  const nextNode = value < node.value ? node.left : node.right;<br>  return search(nextNode; value);<br>}<br><br>console.log(search(node1; 4));</pre>
JS - Promises,,1. Create promise that returns given number<br>2. Create another promise that returns given number in 2s; print sum<br>3. Print first arrived value<br>4. Return <i>new Error('timeout')</i> if any of them take longer than 1s<br><pre>const p1 = new Promise((res; rej) => res(1));<br><br>const p2 = new Promise((res; rej) => {<br>    setTimeout(() => res(2); 2000);<br>});<br><br>const deadline = new Promise((res; rej) => {<br>    setTimeout(() => rej(); 1000);<br>});<br><br>const result = Promise.all([p1; p2])<br>    .then(([r1; r2]) => r1 + r2);<br><br>Promise.race([result; deadline])<br>    .then(console.log)<br>    .catch(() => {<br>        throw new Error('timeout');<br>    });</pre>
Angular - practical,,<pre>// app.component.ts<br><br>// Given:<br>// 1. A list of colors composed of "red" and "green" elements<br>// 2. A "Square" component that renders a square of a given color and executes a click method<br><br>// Implement a parent component named "App" that:<br>// 1. Uses the given Square component to render all squares from the "colors" list<br>// 2. Exposes the following functionality:<br>// - click green  => change current element to "red" + add 1 new "green" element at the end of the list<br>// - click red    => delete current element<br><br>import {Component Input} from '@angular/core';<br><br>@Component({<br>  selector: 'app-square'<br>  template: `< div<br>      [ngStyle]="{<br>        backgroundColor: color<br>        width: '20px'<br>        height: '20px'<br>        margin: '10px'<br>      }"<br>    ></ div>`<br>})<br>export class SquareComponent {<br>  @Input() public color = 'black';<br>}<br><br>@Component({<br>  selector: 'app-root'<br>  template: `< app-square<br>    *ngFor="let color of colors; let index = index "<br>    [color]="color"<br>    (click)="onClick(index)"<br>  ></ app-square>`<br>})<br>export class AppComponent {<br>  colors = ['red' 'green' 'red'];<br><br>  onClick(index: number) {<br>    switch (this.colors[index]) {<br>      case 'red':<br>        this.colors = this.colors<br>          .slice(0 index)<br>          .concat(this.colors.slice(index + 1));<br>        break;<br>      case 'green':<br>      default:<br>        this.colors[index] = 'red';<br>    }<br>  }<br>}</pre>
RxJS - calculate sum,,<pre>const arr = ['1';['2';'3'];'4';['5']]; //sum = 15<br><br>from(arr).pipe(<br>    switchMap(arr => arr);<br>    map(n => Number(n));<br>    reduce((acc; n) => acc + n; 0);<br>).subscribe(console.log);<pre>
