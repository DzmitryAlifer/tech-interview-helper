topic,words,answer
Intersection of arrays,array arrays intersection,<pre>function intersection(arr1; arr2) {<br>  return arr1.reduce((acc; item) => {<br>    if (arr2.includes(item)) {<br>      delete arr2[arr2.indexOf(item)];<br>      acc.push(item);<br>    }<br>    return acc;<br>  }; []);<br>}</pre>
Merge sorted arrays,merge sorted arrays,<pre>function merge(array1; array2) {<br>  const array1Copy = array1.slice();<br>  const array2Copy = array2.slice();<br>  const result = [];<br>  let shifted1; shifted2;<br><br>  for(let i = 1; i <= array1.length + array2.length; i++) {<br>    if (shifted1 === undefined) shifted1 = array1Copy.shift();<br>    if (shifted2 === undefined) shifted2 = array2Copy.shift();<br>    if (shifted1 === undefined && shifted2 === undefined) break;<br><br>    if (shifted2 === undefined || shifted1 < shifted2) {<br>        result.push(shifted1);<br>        shifted1 = undefined;<br>    } else {<br>        result.push(shifted2);<br>        shifted2 = undefined;<br>    }<br>  }<br><br>  return result;<br>}</pre>
Reverse one-directional linked list,reverse reversed one uni directional linked list,<pre>class Node {<br>  constructor(value) {<br>    this.value = value;<br>    this.next = null;<br>  }<br>}<br><br>const node1 = new Node(1);<br>const node2 = new Node(2);<br>const node3 = new Node(3);<br>node1.next = node2;<br>node2.next = node3;<br><br>function reverseLinkedList(node) {<br>  if (!node?.next) return null;<br>  const reversedNode = reverseLinkedList(node.next);<br>  node.next.next = node;<br>  node.next = null;<br>  return reversedNode;<br>}</pre>
