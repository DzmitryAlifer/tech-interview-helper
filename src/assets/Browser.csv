topic,words,answer
Storages,storage storages local session cookie cookies,<i>LocalStorage</i> - full local persistence across multiple sessions. Works sunc. Stores data as key-value string pairs. We use expensive <i>JSON.parse()</i> to exract data from LS and cast convert to object.<br><br><i>SessionStorage</i> - available locally for the duration of the browser session: deleted when tab or window is closed but it survives page reloads. Typically used for local sensitive data.<br><br><i>Cookies</i> - data automatically sent to the server on every request to the same domain. Safe if using SSL and HttpOnly header.<br><br><i>IndexedDB</i> - store JS objects and define indexes for high-performant access. Use when state that needs to be stored is large in size.<br><br><i>Cache Storage</i> - stores requests/response pairs.
HTML5 APIs,html,audio and video API; canvas; different kinds of < input > tag; drag'n'drop; form validation; localStorage IndexedDB etc; web components; Web Sockets; Service Workers; Geolocation; Blobs
HTML5 Forms,form forms,<pre>< form action="/action_page.php"><br>  < label for="user">User:</label><br>  < input type="text" name="user" value="John"><br>  < input type="submit" value="Submit"><br>< /form><br></pre>Client-side validations: required; min; max; minlength; maxlength; type(like email); pattern.<br>Pseudo-classes <i>:valid</i> and <i>:invalid</i> allows to apply specific styles depending on validation.
HTML5 History API,history,DOM Window object provides access to the browser's session history. It has methods <i>back() forward() go(n) pushState() replaceState()</i><br><br><i>Window.location</i> - property returning <i>Location</i> object with information about the current location of the document.
Manifest,manifest money fest,<i>manifest.json</i> - defines app rules; icons; some default styling; scripts that migh take control; initial behavior; browser functionalities that can be accessd.
HTML semantic elements,semantic,<i>Semantic</i> elements clearly describes its meaning to both the browser and the developer. List of semantic elements: <i>footer; header; nav; main; section; aside; details; summary; article; time</i>.
DOM,dom dome document object don't,<i>Document Object Model</i> connects web pages to scripts by representing the in-memory structure of a document (e.g. web page). DOM represents a document with a logical tree. Each branch of the tree ends in a node and each node contains objects. DOM methods allow programmatic access to the tree. With them you can change the document's structure or style or content.<br><br>Nodes can also have event handlers attached to them. Once an event is triggered the event handlers get executed.
Canvas vs SVG,canvas svg,<i>Canvas</i> - composed of pixels; less scalable and controlled through scripts.<br><i>SVG</i> (Scalable Vector Graphics) - scalable and controlled via CSS and scripts like other HTML elements.
HTTP versions,http versions,<i>HTTP 1.1</i> - unidirectional textual protocol over TCP; 1 request on a TCP connection (has pipelining but low browser support)<br><br><i>HTTP 2</i> - bidirectional binary protocol over TCP using frames; request multiplexing; highly unreliable in poor network conditions (when packets get lost all multiplexed streams must be retransmitted)<br><br><i>HTTP 3</i> - bidirectional binary protocol over QUIC (UDP) with improved network usage and reliability. 
Sending request in browser,sending send request browser rendering render,1. Browser goes to the Domain Name System (DNS) server and finds the real IP address of the server that the website lives on.<br>2. Browser sends an HTTP request to server asking it to send a copy of the website to the client.<br>3. If the server approves the client's request the server sends the client a "200 OK" message and then starts sending the website's files to the browser as a series of small chunks called data packets.<br>4. Critical rendering path - browser assembles the small chunks into a complete web page and displays it to the user.
Critical rendering path,critical rendering render path sending send request browser,<i>CRP</i> - sequence of steps the browser goes through to convert the HTML CSS and JavaScript into pixels on the screen.<br><br>HTML is being parsed to create DOM. HTML may request JavaScript which may alter the DOM. HTML includes or makes requests for styles; the CSS object model is being built. The browser engine combines DOM and CSSOM to create Render Tree. Layout determines the size and location of everything on the page. Once layout is determined pixels are painted on the screen.
Rendering approaches,rendering,1. <i>Full Server-Side Rendering (SSR)</i> - requested content is returned as a finished HTML page and browsers can render it right away. DOM APIs aren't used. Gap between First Contentful Paint and Time to Interactive is usually small. Don't make use of rich features.<br><br>2. <i>Static Rendering</i> -  SPA with minimum JS. All pages are pre-rendered to static HTML. Produce individual HTML files for every possible URL ahead of time.<br><br>3. <i>Server-Side Rendering With (Re)Hydration (Universal Rendering; SSR + CSR)</i> - with hydration the HTML page returned from the server also contains a script that loads a fully-fledged client-side application. Fast First Contentful Paint. Long gap between First Contentful Paint and Time To Interactive. Rehydration is very expensive.<br><br>4. <i>Streaming Server-Side Rendering With Progressive Hydration (SSR + CSR)</i> - we render multiple requests at once and send down content in chunks as they get generated. On the client-side, rather than booting the entire application at once, we boot up components progressively. We hidrate the critical components first.<br><br>5. <i>Full Client-Side Rendering (CSR)</i> - rendering and booting are done on the client. Big gap between First Contentful Paint and Time To Interactive.
defer vs async,defer async,<i>< script></i> - rendering is being interrupter for script download and execution<br><br><i>< script defer></i> - script is downloaded in parallel with DOM construction and rendering process; executed when rendering is finished. Used for scripts that need the whole DOM.<br><br><i>< script async></i> - script is loaded in parallel with rendering; executed once it is loaded it interrupts rendering to execute. Used for independent scripts like counters or ads.<i>< script type='module'></i> - same as <i>defer</i>. Additionally it might perform parallel script downloading.<br><br><i>< script type='module' async></i> - same as <i>async</i>. Additionally it might perform parallel script downloading.
Cross-Origin Resource Sharing,cross-origin resource sharing options,<i>CORS</i> - HTTP-header based mechanism that allows a server to indicate any origins (domain or port) other than its own from which a browser should permit loading resources.<br><br><i>CORS</i> relies on browser's 'preflight' OPTIONS http-request to the server hosting the cross-origin resource to check that the server will permit the actual request. In that 'preflight' the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.<br><br>CORS can be adjusted by headers <i>Access-Control-Allow-Origin</i> and <i>Access-Control-Request-Method</i>.
Web vilnarabilities,web vulnarability,<i>XSS (cross-site scripting)</i> - allow to manipulate websites to return malicious scripts to visitors. Might happen when browser or application authors fail to implement the same origin policy.<br>To prevent:<br>1. Set flags on the set-cookie HTTP header: HttpOnly - does not allow JS access on the cookie<br>2. Send cookies only over HTTPS<br><br><i>CSRF (cross-site request forgery)</i> - allow to manipulate browsers to take unintended actions on other sites. Might happen when target sites authenticate requests solely using cookies and attackers are able to send requests carrying users' cookies.<br><br><i>SQL injection</i> - malicious SQL postfix in input fields (ex: <i>' or 1=1; --</i> at the end of password).
Web components / shadow DOM,web component components shadow,<i>Web components</i> - reusable custom elements with functionality and features encapsulated in the <i>Shadow DOM</i>. Can be used standalone or with web frameworks. The most common Web Component libraries are <i>Stencil</i> and <i>Lit</i>.<br><br>Important aspect of WC is encapsulation - being able to keep the markup structure and style and behavior hidden and separate from other code on the page so that different parts do not clash. <i>Shadow DOM</i> is key part of this providing a way to attach hidden separated DOM to an element.
