topic,words,answer
Lifecycle hooks,life cycle lifecycle hook hooks hoax hawk hawks,<i>ngOnChanges</i> - on value of a data bound property change. <br><br><i>ngOnInit</i> - called once on initialization of the directive/component sets and displays component input properties. <br><br><i>ngDoCheck</i> - called during every change detection run. <br><br><i>ngAfterContentInit</i> - called once right after <i>ngDoCheck</i> when <i>ng-content</i> pushed external content into the component's view. <br><br><i>ngAfterContentChecked</i> - called after Angular checks the <i>ng-content</i> projected into the component. <br><br><i>ngAfterViewInit</i> - called after Angular initializes the component's views and child views. <br><br><i>ngAfterViewChecked</i> - called after Angular checks the component's views and child views. <br><br><i>ngOnDestroy</i> - called before Angular destroys the directive/component.
constructor vs ngOnInit,constructor instructor,<i>constructor</i> - default TS method which is normally used for the initialization purpose; mostly used only for DI setup. <br><br><i>ngOnInit</i> - specific to Angular especially used to define Angular bindings. Even though constructor getting called first it is preferred to move all of Angular bindings to it. Important note that <i>@Input</i> values are not accessible in constructor.
Data binding,binding,Core concept that defines the communication between component and template. <br><br>Data binding ways: <br><br>1. From component to template - interpolation: <i> {{name}}</i><br> 2. From component to template - property binding: <i>[property]='value'</i> <br>3. From template to component - event binding: <i>(click)='logout()'</i> <br>4. Two-way binding: <i>[(ngModel)]='value'</i>
Metadata. Decorators.,metadata decorator decorators,Metadata is the way to configure the expected behavior of the class. The metadata is represented by decorators: 1. Class decorators (@NgModule @Component) 2. Property decorators (@Input @Output) 3. Method decorators (@Input @HostListener) 4. Parameter decorators (@Inject)
Dependency injection,dependency injection,DI in Angular is an embedded mechanism that allows classes to asks for dependencies from external sources rather than creating them itself. <br><br>Two main roles exist in the DI system: dependency consumer and dependency provider. <i>@Injectable</i> decorator specifies that Angular can use this class in the DI system.
Provider. Injectable.,provider providers injectable service reminder reliable,Provider is an instruction to DI system on how to obtain a value for a dependency. <br><br>Ways to declare provider: <br>1. <i>@Injectable({providedIn: 'root'})</i> - service is available throughout the app (allows keeping the service as a singleton) <br>2. <i>@Injectable({providedIn: UserModule})</i> - service is available only if <i>UserModule</i> is imported <br>3. <i>@NgModule({providers: [UserService]})</i> - service is available only if <i>UserModule</i> is imported (same as previous). <br><br>Sharing services via modules is not recommended since importing module will result each time with a new service instance instead of recommended singletone.
Custom pipes,pipe pipes fight piper,Apart from built-in pipes you can write your own custom pipe. A pipe is a class decorated with <i>@Pipe</i> decorator that implements the <i>PipeTransform</i> interface's transform method that accepts an input value and params and returns the output value. The defined pipe name can be used within template expressions.
Pure vs impure pipes,pure impure pipe pipes fight piper,<i>Pure</i> pipe is only called when Angular detects a change in the value or params passed to a pipe. Pipes are pure by default. <br><br><i>Impure</i> pipe (controlled by <i>pure:false</i>) is called for every change detection cycle (very often) no matter whether value or params changes. <br><br>Impure pipes might be needed when the input was changed by property (not by reference). In this case pure pipe won't detect it. Although impure pipes are being called very often so it may harm the performanse. So it's not recommended to use impure pipes for filtering operations.
trackBy,track trend dragon ball by buy bye,The main purpose of using <i>*ngFor</i> with <i>trackBy</i> option is performance optimization. You can help Angular to track which items added or removed by providing a <i>trackBy</i> function which takes the index and the current item as args and needs to return the unique identifier for this item.
@ViewChild,view child children,<i>@ViewChild</i> is a template querying mechanism that is local to the component. It injects a reference to: <br>1. own template HTML element: <i>@ViewChild('title') title: ElementRef</i> <br>2. component or directive: <i>@ViewChild(ChildComponent) childComponent: ChildComponent</i> <br>3. directive (maybe one of many on this element): <i>@ViewChild('inputElement' {read: MyDirective}) myDirective: MyDirective</i>. <br><br><i>@ViewChild</i> injected value is not immediately available at component construction time. Angular will fill in this property automatically but only after the view initialization is completed (<i>ngAfterViewInit</i>). <br><br><i>@ViewChild</i>'s static (defaults to <i>false</i>) property is being used for indicating whether the reference to be instantiated before (true) or after (false) change detection. <i>True</i> is for creating embedded views (like charts) on the fly.
Module,module modules model mondo moodle madill mojo,<i>@NgModule</i> metadata is used to tell the compiler what components to be compiled for this module and how to link this module with other modules.
Bootstrapping module,bootstrap bootstrapping module modules model mondo moodle madill mojo,Bootstrapping module is a single root module that is being used for launching the app. It is commonly known as <i>AppModule</i>. It imports the <i>BrowserModule</i>. In its metadata it contains bootstrapping component: <i>bootstrap: [AppComponent]</i>. <br><br>Bootstrapping module is being bootstrapped from the app entry point (<i>src/main.ts</i>) like this: <i>platformBrowserDynamic().bootstrapModule(AppModule)</i>.
Feature module,feature future module modules model mondo moodle madill mojo,Used for the purpose of organizing code. Import <i>CommonModule</i> that provides common directives as <i>*ngIf</i> and <i>*ngFor</i>.
Lazy-loaded module,lazy loaded module modules model mondo moodle madill mojo,By default modules are eagerly loaded. To keep the initial bundle size smaller some of modules can be made lazy-loaded. This way the app will be loaded by smaller chunks instead of one big bundle. <br><br>To lazy load module use <i>loadChildren</i> (instead of <i>component</i>) in <i>AppRoutingModule</i> routes configuration: <br><i>loadChildren: () => import('./items/items.module').then(m => m.ItemsModule)</i>
Resolvers and guards,resolver resolvers guard guards,<i>Resolver</i> is a data provider and it is about authorized access to the data for the component before the router starts navigation (runs before <i>guard</i>). Implements interface <i>Resolve</i> (with method <i>resolve</>). <br><br><i>Guard</i> is about authorized access to the route with or without module loading. Implements interfaces like <i>CanActivate</i> (with method <i>canActivate</i>) or </i>CanLoad</i> (with method <i>canLoad</i>).
canActivate vs canLoad guards,can activate connect connectivity load loads guard guards handload handloads,<i>canActivate</i> - decides if a route can be activated; it may not be the best way for feature modules that are lazy loaded as this guard will always load the module in memory even if the guard returned <i>false</i> which means user is not authorized (security issue - it can be seen in Sources tab). <br><br><i>canLoad</i> - for lazy-loaded modules; decides if a module can be loaded lazily.
Router outlet,router realtor roads outlet outlets,<i>RouterOutlet</i> is a directive from the router library and it acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component: <i><router-outlet></router-outlet></i>.
Router link,router realtor roads link routerlink,<i>RouterLink</i> is a directive on the anchor tag that give the router control. <br><br><i>RouterLinkActive</i> is a directive that toggles css classes for active <i>RouterLink</i> bindings based on the current <i>RouterState</i>.
Router state,router realtor roads state,<i>RouterState</i> is a tree of activated routes. Every node in this tree knows about the <i>consumed</i> URL segments - the extracted parameters - and the resolved data. You can access the current <i>RouterState</i> from anywhere in the application using the <i>Router</i> service and the <i>routerState</i> property.
Router events,router realtor roads events,During each navigation the <i>Router</i> emits navigation events through <i>Router.events</i> property allowing you to track the lifecycle of the route. <br><br>The sequence of router events: <i>NavigationStart RouteConfigLoadStart RouteConfigLoadEnd RoutesRecognized GuardsCheckStart ChildActivationStart ActivationStart GuardsCheckEnd ResolveStart ResolveEnd ActivationEnd ChildActivationEnd NavigationEnd NavigationCancel NavigationError Scroll</i>
Activated route,activate activated route root,<i>ActivatedRoute</i> contains the information about a route associated with a component loaded in an outlet. It provides access to path and params (as observables).
Routes config,route root routes roots rhodes config configuration,A router must be configured with a list of route definitions: <br><i>const appRoutes: Routes = [{path: '/...'} ...]</i>. <br><br>This config array should be included into <i>AppModule</i>'s imports array: <br><i>imports: [RouterModule.forRoot(appRoutes) ...]</i>.
Route properties,route root props properties,<i>path</i> - path to match. Default is <i>path: '/'</i>; <i>path: ' '</i> - for router entry component; <i>path: '**'</i> - for any unmatched (for page not found). <br><i>pathMatch</i> - full or prefix. <br><i>component</i> - component to instantiate. <br><i>redirectTo</i> - redirection URL. <br><i>children</i> - array of child routes. <br><i>loadChildren</i> - lazy-loaded child routes. <br><i>data</i> - additional developer-defined data provided to the component via ActivatedRoute. <br><i>canActivate</i> - array of guards for preventing unauthorized access to the route. <br><i>canLoad</i> - array of guards for preventing unauthorized loading of lazy modules. <br><i>resolve</i> - contains resolvers used for retreiving the data. <br><i>runGuardsAndResolvers</i> - defines when guards and resolvers should run (<i>paramsOrQueryParamsChange</i> or <i>always</i>).
JIT compilation,just time compilation completion compiler compile,<i>Just-in-Time</i> - compiles app in the browser at runtime. It is the default when you run the ng build or ng serve.
AOT compilation,ahead time compilation completion compiler compile,<i>Ahead-of-Time</i> - compiles app at build time. <i>ng build --aot</i> or <i>ng serve --aot</i> or <i>ng build --prod</i>. Can be enabled in <i>tsconfig.json</i>. <br><br>Advantages: <br>1. faster rendering - browser downloads a pre-compiled app version so it can render the application immediately without compiling <br>2. doesn't requre to download compiler <br>3. less async requests - it compiles HTML and CSS into JS which eliminates separate ajax requests to templates and styles <br>4. better security - it compiles HTML and components into JS so there won't be any injection attacks <br>5. detects template errors earlier. <br><br>AOT compilation phases: <br>1. Code analysis. <br>2. Code generation. <br>3. Template validation.
Change detection,change changes detection,CD - process of checking whether the app state has changed and if any DOM needs to be updated. Angular walks through components from top to bottom looking for changes. <br><br>Way to trigger CD: <br>1. <i>changeDetectorRef.detectChanges()</i> - runs CD immediately from the current component down through its descendants <br>2. <i>applicationRef.tick()</i> - triggers CD for the full component tree <br>3. <i>ngZone.run(callback)</i>. <br><br>We can run CD repeatedly with scheduled interval: <br><i>cdRef.detach(); setTimeout(() -> { cdRef.markForCheck(); } 5000);</i>
detectChanges vs markForCheck vs detach,detect detection change changes mark check detach,<i>detectChanges()</i> - runs CD immediately from the current component down through its descendants. <br><br><i>markForCheck()</i> - does not run CD but mark component's ancestors as needing to run CD so next time CD runs anywhere it will run also for those components which were marked. <br><br>In most cases <i>markForCheck()</i> is preferable because it reduces the number of times CD is called. But if it's critical to update the view at that moment when the state is changed or when you are changing the state of the component that has more ancestors than descendants then <i>detectChanges()</i> is the right choise. <br><br><i>detach()</i> - detaches view from CD tree.
CD strategy OnPush,change detection strategy push,Triggers CD when component property link has changed. CD won't be triggered if just one of the properties has been changed. E.g. it needs immutable objects. <br><br>It works the similar way as <i>detach()</i> - it changes detection mode from default <i>CheckAlways</i> to <i>CheckOnce</i>.
ReactiveFormsModule vs FormsModule,form forms reactive,'FormsModule' - implements template-driven forms - model-driven forms where you write the logic validations controls etc in the template part of the code using directives. They are suitable for simple scenarios and have minimal component code and uses two-way binding with '[(ngModel)]' syntax and hard testable. 'ReactiveFormsModule' - implements a model-driven approach for creating forms in a reactive style (form inputs changes over time). These are built around observable streams where form inputs and values are provided as streams of input values. Code is mostly in component. Easily testable.
Form validations: sync vs async,form forms validator validators validation validations,Sync validators are being used for the simple operations without calling BE. Otherwise - use async ones.
ng-content,content,'ng-content' is used to insert the content dynamically inside the component that helps to increase component reusability.
Test harness,harness,A component harness is a testing API around an Angular directive or component to make tests simpler by hiding implementation details from test suites. This can be shared between tests. The idea for component harness comes from the PageObject pattern commonly used for integration testing.
Bazel,bazel,Bazel is a powerful build tool developed and massively used by Google and it can keep track of the dependencies between different packages and build targets. In Angular 8 you can build your CLI application with Bazel. Benefits: 1. both BE and FE can be built with Bazel 2. supports incremental build and tests
Tree shaking,tree shaking,TS - step in build process that removes unused code so the application becomes smaller. It can be visualised as shaking a physical tree causing dead branches and leaves to fall off. One of the primary ways Angular looks for code to shake is by import paths.
Ivy,ivy eevy eevee,Ivy is a new rendering engine for Angular. You can choose to opt in a preview version of Ivy from Angular version 8. It can be enabled in 'angularCompilerOptions' of 'tsconfig'. Since Angular 9 Ivy is switched on by default. Ivy benefits: 1. generated code that is easier to read and debug at runtime 2. faster re-build time 3. faster AOT compilation 4. improved payload size 5. improved template type checking
Zone,zone,Zone - concept that provides execution context that persists across async tasks. Zone allows to customize CD (f.e. to prevent a mousemove or scroll event to trigger CD). While Zone.js can monitor all the states of sync and async operations Angular additionally provides a service called NgZone. This service creates a zone named angular to automatically trigger CD when sync or async function is executed. NgZone service provides a 'run()' method that allows you to execute a function inside Angular zone. This function is used to execute third party APIs which are not handled by Zone and trigger CD automatically at the correct time. Whereas 'runOutsideAngular()' method is used when you don't want to trigger CD. Zone is being imported in 'polyfills.ts'. It can be disabled by removing that import. If you disable Zone you will need to trigger all CD by yourself.
Zone lifecycle hooks,zone,'onScheduleTask' - when new async task is scheduled (f.e. when setTimeout() is called). 'onInvokeTask' - when async task is about to execute (f.e. when the callback of setTimeout() is about to execute). 'onHasTask' - when task status changes from stable (no tasks in the zone) to unstable(a new task is scheduled in the zone) or visa versa. 'onInvoke' - when synchronous function is going to execute.
Service workers,worker workers,SW - script that runs in web browser and manages caching for app. Works with HTTPS not HTTP. Using SW to provide precaching lets you intercept network requests and deliver responses directly from a local cache instead of retrieving them from the network. With the help of SW it is possible to make the app restored from cache once the user closes and then re-opens browser tab.