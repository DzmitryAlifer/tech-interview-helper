topic,words,answer
TypeScript, typescript type script,<i>TypeScript</i> - JS-based object-oriented language developed by MicroSoft. Can be used with any browser or Node.js. Supports ECMAScript >= 3. Its code needs to be compiled.<br><br>Features: static typing; classes; interfaces; enums; generics; partials; mixins.
Generics,generic generics,<i>Generics</i> are the way to describe the similar model or functionality for different types.<br><br>Generic function: <i>function getObj< Type >(arg: Type): Type {return arg;}</i><br>Generic interface: <i>interface GenericIdentity1 {< Type >(arg: Type): Type;}</i> or <i>interface GenericIdentity2< Type > {(arg: Type): Type;}</i><br>Generic class: <i>class GenericIdentity3< Type > {value: Type;}</i><br><br>Ex: func that accepts string|number arg and returns the same type:<br><i>function get< T extends string|number >(arg: T): T { return param; }</i>
Interface vs Type,interface interfaces type,<i>Interface</i> - public contract that other types implementing it should follow. All properties of the interface should be public. We can use an interface as the basis for our types hierarchy.<br><br><i>Type</i> is an alias for unioning of interfaces or other types. It can also be an alias for primitives' union.
Class,class classes prototype prototypes prototypal inheritance,<i>Class</i> - unit of OOP designed to encapsulate parts of logic with possibility to share it through inheritance.<br><br>In JS classes are build on prototypes. So <i>Class</i> in JS is a syntactic sugar for constructor functions + prototypal inheritance.
Enum,enum enums,<i>Enum</i> - set of named constants. On runtime enum is compiled to the tuple object with two-way mapping (name-to-value and value-to-map).<br><br><i>Constant enums (const enum)</i> - more performant enum; compiled to simple array so there is no two-way mapping.<br><br><i>Ambient enums (declare enum)</i> - same as <i>const enum</i> they don't have two-way mapping; unlike <i>const enum</i> their values always computed (unknown on compile time).
any / unknown / void / never,any unknown void never,<i>any</i> - top level type; anything can be is assignable to <i>any</i><br><br><i>unknown</i> - more type-safe version of <i>any</i>; anything is assignable to it but needs to be cast to specific type<br><br><i>void</i> - used for functions that have no return type at all<br><br><i>never</i> - used for functions that never returns (always throws an error OR has an infinite loop)
keyof / in / is / as / const / infer,infer keyof key kiosk of off infer,<i>keyof</i> - takes object type and produces a string or numeric literal union of its keys<br><br><i>in</i> - checks if property belongs to object<br><br><i>is</i> - type-testing operator<br><br><i>as</i> - type assertion operator<br><br><i>infer</i> - compiler ensures that you have declared all type variables explicitly
Partial / Pick,partial pick pig peak,<i>Partial&lt;T&gt;</i> - makes all fields of <i>T</i> interface optional;<br>example of custom Partial: <i>type MyPartial< T > = {[P in keyof T]?: T[P]}</i><br><br><i>Pick&lt;T; 'prop1'|'prop2'&gt;</i> - narrows type T to the mentioned props.
