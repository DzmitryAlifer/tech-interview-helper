topic,words,answer
CSS,cascade style sheet shit,<i>CSS</i> - language that determines how the elements in the page are shown. <i>CSS</i> is used to develop a consistent look and feel for all the pages. It allows to separate the style from layout.
CSS box model,box model,Each HTML element is wrapped into a rectangular box. It has <i>height</i> <i>width</i> <i>padding</i> <i>border</i> and <i>margin</i>.
Include CSS in the webpage,include import,1. External styles via link: <i>< link rel="stylesheet" type="text/css" href="mystyles.css" /></i><br><br>2. Embedded styles: <i>< style type="text/css">...</style></i><br><br>3. Inline styles: <i>< h2 style="color:red">Title</h2></i><br><br>4. Styles imported to another CSS: <i>@import "path/to/style.css";</i>
CSS selector types,selector selector,1. Universal selector: <i>* {...}</i> <br>2. Element type selector: <i>div {...}</i> <br>3. ID selector: <i>#container {...}</i> <br>4. Class selector: <i>.box {...}</i> <br>5. Descendant combinator: <i>#container .box {...}</i> <br>6. Child combinator: <i>#container> .box {...}</i> <br>7. General sibling combinator: <i>h2 ~ p {...}</i> <br>8. Adjacent sibling combinator <i>div + p {...}</i> <br>9. Attribute selector: <i>input [type=”text”] {...}</i> <br>
CSS Preprocessor,preprocessor pre processor,<i>CSS Preprocessor</i> - tool used to extend the basic functionality of CSS through its own scripting language. It helps to use complex logical syntax like variables functions mixins code-nesting.<br><br><i>SASS</i> uses indentation; no brackets or semicolons.<i>SCSS</i> uses nested blocks.<i>LESS</i> is similar to <i>SCSS</i> but defines vars differently.
Viewport height and width (VH/VW),viewport view port,It’s a CSS unit used to measure height and width in % with respect to the viewport. It is used mainly in responsive design techniques. The measure VH is equal to 1/100 of the height of the viewport. If the height of the browser is 1000px 1vh is equal to 10px.
Reset vs normalize CSS,reset normalize,<i>Reset CSS</i> - aims to remove all built-in browser styling (margins paddings font-sizes of all elements are reset to be the same).<br><br><i>Normalize CSS</i> - aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies.
Block vs inline vs inline-block,inline line,<i>Block element</i> - always starts on a new line and takes space for an entire row or width (ex. <i>div</i> <i>p</i>).<br><br><i>Inline element</i> - appears on the same line as the content and tags beside them (ex. <i>a span img</i>).<br><br><i>Inline-block element - similar to inline element except it can have padding margin height and width values.
Pseudo-elements and Pseudo-classes,pseudo class classes,<i>Pseudo-elements</i> allows us to create items that do not normally exist in the document tree (<i>::before ::after ::first-letter ::first-line ::selection</i>).<br><br><i>Pseudo-classes</i> select regular elements but under certain condition(<i>:link :visited :hover :active :focus :last-child</i>).
Adaptive vs responsive design,adative responsive design,<i>Adaptive design</i> focuses on developing websites based on multiple fixed layout sizes. Usually adaptive designs use standard screen widths - 320px 480px 760px 960px 1200px 1600px. These sizes are detected and appropriate layouts are loaded.<br><br><i>Responsive design</i> focuses on showing content on the basis of available browser space. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.
Flexbox properties,flexbox flex box,<i>flex-direction</i> - defines the direction the container should stack flex items (<i>row column row-reverse column-reverse</i>).<br><br><i>flex-wrap</i> - specifies how flex items should be wrapped (<i>wrap no-wrap wrap-reverse</i>)<br><br><i>flex-flow</i> - for setting both <i>flex-direction</i> and <i>flex-wrap</i> properties in one statement.<br><br><i>justify-content</i> - for aligning the flex items (<i>center flex-startflex-end space-around space-between</i>).<br><br><i>align-items</i> - for aligning flex items.<br><br><i>align-content</i> - for aligning flex lines.
Cascading in CSS,cascading cascade,<i>Cascading</i> refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict.
CSS position property,position,<i>Absolute</i> - places element exactly where you want. Sets relative to itss parent. If no parent is available then relative to the entire page.<br><br><i>Relative</i> - no effect on element positioning. It allows the use of z-index on the element. Any child element will be absolutely positioned within that block.<br><br><i>Fixed</i> - positioned relative to viewport or browser window itself. Viewport doesn't change if you scroll and hence the fixed element will stay right in the same position.<br><br><i>Static</i> - default for every single page element. Can be used for removing some positioning that got applied.<br><br><>Sticky</i> - mix of <i>relative</i> and <i>fixed</i>. The element is treated as <i>relative</i> positioned until it crosses a specified threshold at which point it is treated as <i>fixed</i> positioned.
Center align a div inside another div,center align,1. <i>.outer {vertical-align: middle; text-align: center;}<br>.inner {display: inline-block;}</i><br><br>2. <i>.outer {position: relative;}<br>.inner {position: absolute; top: 50%; left: 50%; transform: translate(-50%; -50%);}</i><br><br>3. <i>.outer {display: flex; justify-content: center; align-items: center;}</i>
Media properties types,media responsive design,1. <i>All</i> (default) - used for all media-type devices.<br>2. <i>Screen</i> - for desctop or mobile screen.<br>3. <i>Print</i> - for printers.<br>4. <i>Speech</i> - for screen-readers.
Flexbox vs Grid layout,flexbox flex box grid layout,<i>Flexbox layout</i> - 1-dimensional system (either in a <i>column</i> or a <i>row</i>) which is basically most appropriate to the app components.<br><br><i>Grid Layout</i> - 2-dimensional layout system which can handle both <i>columns</i> and <i>rows</i>.<br><br><i>Properties for the Parent (flex container)</i><br>display: flex;<br>flex-direction: row | row-reverse | column | column-reverse;<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right;<br>align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end;<br>align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline;<br><br><i>Properties for the Children (flex items)</i><br>order: 4;<br>flex-grow: 5;<br>flex-shrink: 3;<br>align-self: auto | flex-start | flex-end | center | baseline | stretch;
:root pseudo-class,root,<i>:root</i> selector allows you to target the highest-level 'parent' element in the DOM.
box-sizing:border-box,box sizing border,Includes border and padding into the size calculation of element.
Specificity and precedence,specificity precedence priority,A process of determining which CSS rule will be applied to an element. It actually determines which rules will take precedence. Inline style usually wins then ID then the class value (or pseudo-class or attribute selector).<br><br><i>Specificity values</i><br>< p style='color: pink'> = 1000<br>#myId = 100<br>.myClass = 10<br>[attribute='value'] = 10<br>div = 1<br>* = 1
overflow:hidden,overflow hidden,<i>Overflow</i> property specifies whether the content has to be clipped or the scrollbars have to be added to the content area when the content size exceeds the specified container size where the content is enclosed. With <i>overflow: hidden</i> the content gets clipped below the size of the container making the rest of the content invisible.
position: absolute,position absolute,Allows to place an element where you want in an exact location. Element is getting removed from the normal workflow of the HTML document. The layout does not create any space for that element in its page layout. The element is positioned relative to the closest positioned ancestor. Properties <i>right left top bottom</i> define the exact location. 
translate() vs position:absolute,position absolute translate,<i>translate()</i> does not cause the browser to trigger repaint and re-layout. <i>position:absolute</i> triggers the repaint or DOM reflow. So <i>translate()</i> gives better performance.