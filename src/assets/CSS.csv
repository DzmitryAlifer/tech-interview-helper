topic,words,answer
CSS,css cascade style sheet shit,<i>CSS</i> - language that determines how the elements in the page are shown. <i>CSS</i> is used to develop a consistent look and feel for all the pages. It allows to separate the style from layout.
Box model,box model mother,Each HTML element is wrapped into a rectangular box. It has <i>height</i> <i>width</i> <i>padding</i> <i>border</i> and <i>margin</i>.
Include CSS in the webpage,include clothes import,1. External styles via link: <i>< link rel="stylesheet" type="text/css" href="mystyles.css" /></i><br>2. Embedded styles: <i>< style type="text/css">...</style></i><br>3. Inline styles: <i>< h2 style="color:red">Title</h2></i><br>4. Styles imported to another CSS: <i>@import "path/to/style.css";</i>
Selector types,selector selectors selective electric types,1. Universal selector: <i>* {...}</i> <br>2. Element type selector: <i>div {...}</i> <br>3. ID selector: <i>#container {...}</i> <br>4. Class selector: <i>.box {...}</i> <br>5. Descendant combinator: <i>#container .box {...}</i> <br>6. Child combinator: <i>#container> .box {...}</i> <br>7. General sibling combinator: <i>h2 ~ p {...}</i> <br>8. Adjacent sibling combinator <i>div + p {...}</i> <br>9. Attribute selector: <i>input [type=”text”] {...}</i> <br>
Preprocessors,preprocessor preprocessors pre processor processors process processes,<i>CSS Preprocessors</i> - tools used to extend the basic functionality of CSS through its own scripting language. It helps to use complex logical syntax like variables functions mixins code-nesting.<br><br><i>SASS</i> uses indentation; no brackets or semicolons.<br><i>SCSS</i> uses nested blocks.<br><i>LESS</i> is similar to <i>SCSS</i> but defines vars differently.
Length units,length unit units,<i>px</i> - pixels<br><i>em</i> - parent font size of the element (or parent in case of <i>font-size</i>)<br><i>rem</i> - font size of the root element<br><i>vw</i> - 1% of the viewport's width<br><i>vh</i> - 1% of the viewport's height
Viewport height and width (VH/VW),viewport view port viewports newport,It’s a CSS unit used to measure height and width in % with respect to the viewport. It is used mainly in responsive design techniques. The measure VH is equal to 1/100 of the height of the viewport. If the height of the browser is 1000px 1vh is equal to 10px.
Reset vs normalize CSS,reset resent resend normalize normal eyes,<i>Reset CSS</i> - aims to remove all built-in browser styling (margins paddings font-sizes of all elements are reset to be the same).<br><br><i>Normalize CSS</i> - aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies. <i>Normalize.CSS</i> has been the most popular CSS reset library for years - it saves you a lot of time matching a duplicate experience for each web browser.
Block vs inline vs inline-block,display block black inline line,<i>Block element</i> - always starts on a new line and takes space for an entire row or width (ex. <i>div</i> <i>p</i>).<br><i>Inline element</i> - appears on the same line as the content and tags beside them (ex. <i>a span img</i>).<br><i>Inline-block</i> element - similar to <i>inline</i> element except it can have <i>padding margin height</i> and <i>width</i> values.
Pseudo-elements and Pseudo-classes,pseudo suda sudo sue element elements class classes supercross superclass,<i>Pseudo-elements</i> allows us to create items that do not normally exist in the document tree (<i>::before ::after ::first-letter ::first-line ::selection</i>).<br><br><i>Pseudo-classes</i> select regular elements but under certain condition(<i>:link :visited :hover :active :focus :last-child</i>).
Adaptive vs responsive design,adative responsive design media query queries,<i>Adaptive design</i> focuses on developing websites based on multiple fixed layout sizes. Usually adaptive designs use standard screen widths - 320px 480px 760px 960px 1200px 1600px. These sizes are detected and appropriate layouts are loaded.<br><br><i>Responsive design</i> focuses on showing content on the basis of available browser space. It is fluid and adapts to the size of the screen no matter what the target device. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.<br><br>To design <i>responsive</i> website:<br>- use Material libs<br>- start with fluid grid<br>- use flexbox layout<br>- define typography in <i>rem</i><br>- use responsive images (in %)<br>- take touchscreens into consideration<br>- pay attention to loading speed (image and data caching; non-blocking JS code; code minifications)
Animation,animation animate,<i>@keyframes my_animation {<br>  0% {background-color: red;}<br> 50% {background-color: blue;}<br>  100% {background-color: green;}<br>}<br><br>div {<br>  background-color: red;<br>  animation-name: my_animation;<br>  animation-duration: 3s;<br>}</i><br><br>We can also use properties: <i>animation-iteration-count; animation-direction; animation-delay; animation-fill-mode;</i>
CSS methodologies,methodologies methodology,<i>CSS methodologies</i> - standardised CSS architecture approaches used for scaling web projects. Main methodologies:<br>1. OOCSS - Object orientated CSS:<br>- separation of structure from skin<br>- separation of container and content<br>2. BEM - Block element modifier:<br>- block names are unique<br>- block names are equal to CSS classes<br>- element names are unique to the block<br>- IDs are not used<br>3.SMACSS - Scalable Modular architecture<br>4. RSCSS - Reasonable System for CSS Stylesheet Structure<br>5. ITCSS - Inverted Triangle CSS
Float vs FlexBox,float flight flexbox flex box xbox plex blacks,<i>Float</i> - removes element from normal flow of document and lets it 'float' side by side to its siblings. It can be to the left or to the right.<br><br><i>FlexBox</i> - 1-dimensional layout. Instead of using <i>float</i> to create layouts by floating elements to the left or the right <i>flexbox</i> allows you to create layouts by aligning items to a single axis (horiz or vert). It is best used for distributing space for items in the same axis. Container should be <i>display:flex</i> or <i>display:inline-flex</i>.
Flexbox properties,flexbox flex box xbox plex blacks,<i>flex-direction</i> - defines the direction the container should stack flex items (<i>row column row-reverse column-reverse</i>).<br><i>flex-wrap</i> - specifies how flex items should be wrapped (<i>wrap no-wrap wrap-reverse</i>)<br><i>flex-flow</i> - for setting both <i>flex-direction</i> and <i>flex-wrap</i> properties in one statement.<br><i>justify-content</i> - for aligning the flex items (<i>center flex-startflex-end space-around space-between</i>).<br><i>align-items</i> - for aligning flex items.<br><i>align-content</i> - for aligning flex lines.
Flexbox vs Grid layout,flexbox flex box xbox plex blacks grid layout,<i>Flexbox layout</i> - 1-dimensional system (either in a <i>column</i> or a <i>row</i>) which is basically most appropriate to the app components.<br><br><i>Grid Layout</i> - 2-dimensional layout system which can handle both <i>columns</i> and <i>rows</i>.<br><br><i>Properties for the Parent (flex container)</i><br>display: flex;<br>flex-direction: row | row-reverse | column | column-reverse;<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right;<br>align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end;<br>align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline;<br><br><i>Properties for the Children (flex items)</i><br>order: 4;<br>flex-grow: 5;<br>flex-shrink: 3;<br>align-self: auto | flex-start | flex-end | center | baseline | stretch;
Cascading in CSS,cascading cascade skating,<i>Cascading</i> refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict.
Position,position addition,<i>Absolute</i> - places element exactly where you want. Sets relative to its parent. If no parent is available then relative to the entire page.<br><br><i>Relative</i> - no effect on element positioning. It allows the use of z-index on the element. Any child element will be absolutely positioned within that block.<br><br><i>Fixed</i> - positioned relative to viewport or browser window itself. Viewport doesn't change if you scroll and hence the fixed element will stay right in the same position.<br><br><i>Static</i> - default for every single page element. Can be used for removing some positioning that got applied.<br><br><i>Sticky</i> - mix of <i>relative</i> and <i>fixed</i>. The element is treated as <i>relative</i> positioned until it crosses a specified threshold at which point it is treated as <i>fixed</i> positioned.
Position absolute,position absolute,Allows to place an element where you want in an exact location. Element is getting removed from the normal workflow of the HTML document. The layout does not create any space for that element in its page layout. The element is positioned relative to the closest positioned ancestor. Properties <i>right left top bottom</i> define the exact location. 
Translate() vs position-absolute,position absolute translate,<i>translate()</i> does not cause the browser to trigger repaint and re-layout. <i>position:absolute</i> triggers the repaint or DOM reflow. So <i>translate()</i> gives better performance.
Center align a div inside another div,center align div santa santan dave centre diff teeth,1. <i>.outer {vertical-align: middle; text-align: center;}<br>.inner {display: inline-block;}</i><br><br>2. <i>.outer {position: relative;}<br>.inner {position: absolute; top: 50%; left: 50%; transform: translate(-50%; -50%);}</i><br><br>3. <i>.outer {display: flex; justify-content: center; align-items: center;}</i>
Media queries,media query queries,<i>Media queries</i> are useful when you want to modify your site or app depending on a device's general type (such as <i>print</i> vs. <i>screen</i>) or specific characteristics and parameters (such as screen resolution or browser viewport width).<br><br>Media queries are used for the following:<br>- to conditionally apply styles with the CSS <i>@media</i> and <i>@import</i> at-rules<br>- to target specific media for the <i>< style > < link > < source ></i> and other HTML elements with the <i>media=</i> attribute<br>- to test and monitor media states using the <i>Window.matchMedia()</i> and <i>MediaQueryList.addListener()</i> JS methods.<br><br>Some examples:<i><br>@media (max-width: 1250px) {}<br>@media screen; print {}<br>@media screen and (min-width: 30em) and (orientation: landscape) {}</i>
Media types,media responsive design,1. <i>All</i> (default) - used for all media-type devices.<br>2. <i>Screen</i> - for desktop or mobile screen.<br>3. <i>Print</i> - for printers.<br>4. <i>Speech</i> - for screen-readers.
Media features,media feature features,<i>Media features</i> describe a specific characteristic of the user agent or output device or environment. Some of them: <i>width height color hover pointer display-mode</i>.
Layout,layout layouts,Multicolumn layout: <i>div.newspaper {column-count: 3; column-gap: 40px; column-rule-style: solid;}</i><br>
Justify-content,justify content,<i>justify-content</i> - CSS property defines how the browser distributes space between and around content items along the main-axis of a flex container and the inline axis of a grid container. It can be <i>start; end; center; space-between; space-around; space-evenly; stretch</i>.
Root pseudo-class,root route fruit selector,<i>:root</i> selector allows you to target the highest-level 'parent' element in the DOM.
Box-sizing:border-box,box sizing border box-sizing border-box,Includes border and padding into the size calculation of element.
Specificity and precedence,specificity specific disappear specificatii city precedence proceedings priority,A process of determining which CSS rule will be applied to an element. It actually determines which rules will take precedence. Inline style usually wins then ID then the class value (or pseudo-class or attribute selector).<br><br><i>Specificity values</i><br>< p style='color: pink'> = 1000<br>#myId = 100<br>.myClass = 10<br>:root (pseudo-classes except :is :has :not) - 10<br>[attribute='value'] = 10<br>div = 10<br>::before ::after ::placeholder (pseudo-elements) = 1<br>* :is :has :not = 0
Overflow,overflow over flow hidden,<i>overflow (visible; hidden; scroll; auto)</i> - specifies whether content has to be clipped or the scrollbars have to be added to the content area when the content size exceeds the specified container size where the content is enclosed. With <i>overflow: hidden</i> the content gets clipped below the size of the container making the rest of the content invisible.
Text overflow,text overflow over flow,<i>text-overflow (clip; display; ellipsis)</i> - specifies how hidden text overflow content is shown. It can also display a custom string.
Overflow wrap,overflow over flow wrap wrapping rap,<i>overflow-wrap (normal; anywhere; break-word)</i> - applies to inline elements setting whether browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.
