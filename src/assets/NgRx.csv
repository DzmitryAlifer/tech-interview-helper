topic,words,answer
What is NgRx,what ngrx,NgRx is a redux implementation using RxJS. Framework for building reactive apps in Angular that provides state management and isolation of side effects and entity collection management and router bindings.
NgRx benefits,benefit benefits,1. <i>Centralized immutable state</i> - all relevant application state exists in one location.<br>2. <i>Testability</i> - all state updates are handled in reducers which are pure functions so they are very simple to test.
NgRx state,state,State is a single immutable data structure. <i>Actions</i> describe state changes. Pure functions called <i>reducers</i> take the previous state and the next action to compute the new state. State accessed with the <i>Store</i> - an observable of state and an observer of actions.
NgRx action,action actions,<i>Actions</i> are one of the main building blocks in NgRx. <i>Actions</i> represent unique events that happen throughout the app. <i>Actions</i> are objects that extend the NgRx <i>Action</i> class with a <i>type</i> property. They have an optional payload property for sending in data to the <i>effect/reducer</i> and are dispatched by the store to either run an effect or change state in a reducer.
NgRx Reducers,reducer reducers producer producers,<i>Reducers</i> are responsible for handling transitions from one state to the next state in your application. <i>Reducer</i> functions handle these transitions by determining which actions to handle based on the action's type. <i>Reducers</i> are pure functions that are the only ones that can change state. They are not really changing state but making a copy of existing state and changing one or more properties on the new state.
NgRx effects,effect sffects,<i>Effects</i> - side effect model for NgRx <i>Store</i>. In a service-based Angular app components are responsible for interacting with external resources directly through services. <i>Effects</i> provide a way to interact with those services and isolate them from the components (components remain responsible basicaly for rendering - not for data fetching).<br><br>Key Concepts:<br><i>Effects</i> isolate side effects from components allowing for more pure components that select state and dispatch actions.<br><i>Effects</i> are long-running services that listen to an observable of every action dispatched from the Store.<br><i>Effects</i> filter those actions based on the type of action they are interested in (by means of <i>ofType</i> operator)<br><i>Effects</i> perform tasks and return a new action.