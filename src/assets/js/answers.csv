topic,words,answer
Types,types,"Object, String, Symbol, Number, BigInt, Boolean, null, undefined"
Object creation,create object creation,1. Function based:  function User(name) { this.name = name; } const user = new User('John'); 2. Object literal: const user = { name: 'John' }; 3. new Object: const user = new Object(); user.name = 'John'; 4. Object.create: const user = Object.create(person); // person is user's prototype (user inherits properties of person)
Strict mode,use strict mode,"In ES5, a new feature called Strict Mode allows to write code in a strict operational environment. It's much less error-prone since all forms of errors(including silent errors) will be thrown."
Pure function,pure,"1. Given the same input, always returns the same output. 2. Produces no side-effects."
var vs let,var let,var has function scope and is hoisted (initialized with undefined before the code is run). let has block scope and isn't hoisted. Let was introduced because function scope is confusing and was one of the main sources of bugs in JS.
Hoisting,hoisting,Hoisting is the default JS behavior when all the var and function declarations are moved on top of their scope (global or local) without their value initialization.
Scope,scope school,"Scope determines the accessibility of vars and funcs at various parts of code. Global scope: vars or funcs declared in the global namespace can be accessed from anywhere. Function/local scope: can be accessed from within the function and not outside of it. Block scope: relates only to let and const (var declarations don't have block scope); can be accessed only inside {} block. The scope is the current context of execution in which values and expressions are visible or can be referenced. If variable cannot be found in local scope, JS engine tries to check for the variable in the outer scope. If no success, it tries to find it in the global scope."
Scope chaining,chain chaining,JS tries to find variable in local scope and if not then it tries to find var inside upper scope etc until it is found or referenceError.
Closure,closure,"Closure is the combination of a function with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time."
Arrow vs traditional function,arrow function,"Introduced by ES6. The biggest difference: inside the traditional function this keyword refers to the object, on which the function is being called, whilst inside arrow function 'this' inherits its value from parent scope."
Prototype,prototype,"Prototype is a creational design pattern that lets you copy existing objects without making your code dependent on their classes. In JS it allows to produce objects with methods and properties predefined in the prototype class.\rPrototype is a useful and memory efficient way of declaring methods for objects of the same type. Alternatively, if we'll be declaring methods directly in JS objects, a new copy of the method will be created for each instance of an object.\rPrototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language. Object's prototype is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.\rObject.prototype functions: toString, toLocaleString, valueOf, hasOwnProperty, isPrototypeOf, propertyIsEnumerable."
Event loop,event loop even,Event loop is a mechanism that allows non-blocking execution af async code in a single threaded environment.