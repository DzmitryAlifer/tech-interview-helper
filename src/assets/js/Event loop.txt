Event loop is a mechanism that allows non-blocking execution af async code in a single threaded environment. 

JS runtime contains a message queue, which is a list of messages to be processed. Each message is associated with a function. When the stack is empty, a message is taken out of the queue and processed. 

There are 3 "stacks" in JS:
1. synchronous calls stack (one function calls another, etc)
2. microtask queue (or job queue or microtask stack) for all async operations with higher priority (process.nextTick, Promises, Object.observe, MutationObserver)
3. macrotask queue (or event queue) for all async operations with lower priority (setTimeout, setInterval, requestAnimationFrame, I/O, UI rendering)

Task execution order:
1. all microtasks first
2. one macrotask
3. all (newly added) microtasks again
4. next macrotask
5. repeat

Event loop never blocks(except alert() / synchronous XHR, they are a bad practice).